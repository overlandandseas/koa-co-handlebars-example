'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _koaRouter = require('koa-router');

var _koaRouter2 = _interopRequireDefault(_koaRouter);

var _koaViews = require('koa-views');

var _koaViews2 = _interopRequireDefault(_koaViews);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _utils = require('../utils');

var _helpers = require('../utils/helpers');

var _helpers2 = _interopRequireDefault(_helpers);

var _page = require('../models/page');

var _page2 = _interopRequireDefault(_page);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

const router = new _koaRouter2.default();

let details = {
  site: {
    title: 'Peter Griffin'
  },
  year: new Date().getFullYear()
};

let viewDir = _path2.default.normalize(process.cwd() + '/views');
let partialDir = _path2.default.normalize(viewDir + '/partials');

const getPartials = () => {
  let partials = {};

  // fs-extra already has a walker but it's asynchronous
  const partialFiles = (0, _utils.walkSync)(partialDir);

  // Assign partials
  for (let partial of partialFiles) {
    let name = _path2.default.parse(partial).name;
    partials[name] = 'partials/' + name;
  }

  return partials;
};

router.use((0, _koaViews2.default)(viewDir, {
  extension: 'hbs',
  map: {
    hbs: 'handlebars'
  }
}));

router.use((() => {
  var ref = _asyncToGenerator(function* (ctx, next) {
    let pages = false;

    try {
      pages = yield _page2.default.find().sort({ _id: 1 });
    } catch (err) {
      (0, _utils.log)('Couldn\'t load pages', err);
    }

    if (!pages) {
      ctx.status = 500;
      ctx.body = 'Couldn\'t load pages';

      return;
    }

    for (let page in pages) {
      pages[page] = pages[page].toObject();
    }

    ctx.pages = pages;
    yield next();
  });

  return function (_x, _x2) {
    return ref.apply(this, arguments);
  };
})());

router.get('*', (() => {
  var ref = _asyncToGenerator(function* (ctx, next) {
    details.site.canonical = ctx.request.origin;
    const path = ctx.request.url;

    details.pages = ctx.pages;
    let result = false;

    try {
      result = yield _page2.default.findOne({
        slug: path.split('/')[1]
      });
    } catch (err) {
      (0, _utils.log)('Not able to load page', err);
    }

    if (!result) {
      return;
    }

    Object.assign(details, result.toObject());
    const kind = path === '/' ? 'index' : 'page';

    ctx.state = {
      helpers: _helpers2.default,
      partials: (0, _utils.exists)(partialDir) ? getPartials() : {}
    };

    details.slug = ctx.originalUrl.split('/')[1];

    try {
      yield ctx.render('index', details);
    } catch (err) {
      return (0, _utils.log)('Not able to render ' + kind, err);
    }

    yield next();
  });

  return function (_x3, _x4) {
    return ref.apply(this, arguments);
  };
})());

exports.default = router;
module.exports = exports['default'];