'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _koaRouter = require('koa-router');

var _koaRouter2 = _interopRequireDefault(_koaRouter);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _utils = require('../utils');

var _db = require('../utils/db');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

const router = new _koaRouter2.default();

router.get('/', (() => {
  var ref = _asyncToGenerator(function* (ctx, next) {
    const query = {
      filename: _path2.default.basename(ctx.request.originalUrl),
      root: 'media'
    };

    let isAvailable = false;

    try {
      isAvailable = yield _db.fs.exist(query);
    } catch (err) {
      (0, _utils.log)('Not able to load file', err);
    }

    if (!isAvailable) {
      ctx.body = 'File doesn\'t exist!';
      return;
    }

    const stream = _db.fs.createReadStream(query);

    stream.on('error', _utils.log);

    // Try to get the file's meta data and give back an error if one appears
    const metaData = new Promise(function (resolve, reject) {
      _db.fs.findOne(query, function (err, meta) {
        if (err) {
          return reject(err);
        }

        resolve(meta);
      });
    });

    let meta = {};

    try {
      // Assign metadata to variable or throw error
      meta = yield metaData;
    } catch (err) {
      return (0, _utils.log)('Not able to get file meta', err);
    }

    // Tell the client how to treat the data
    ctx.set({
      'Content-Type': meta.contentType,
      'Content-Length': meta.length,
      'Cache-Control': 'max-age=31536000'
    });

    // Send filestream to client
    ctx.body = stream;
    yield next();
  });

  return function (_x, _x2) {
    return ref.apply(this, arguments);
  };
})());

exports.default = router;
module.exports = exports['default'];